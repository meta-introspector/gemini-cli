feat: Implement OODA loop framework and initial Rust project setup

This commit introduces the OODA loop operational framework for the Gemini CLI agent. It also includes the initial setup for Rust projects intended for vendorization and crate searching, along with documentation of current tasks and design concepts.

-   Updated `dwim.sh` to launch Gemini CLI from the parent project root, ensuring correct operational context.
-   Documented the OODA (Observe, Orient, Decide, Act) loop as the operational plan for the agent.
-   Created `agent_orchestration_design.md` detailing a conceptual framework for managing agents and 10k submodules, incorporating "key vibe", "meta meme", BERT embeddings, and a "lattice of vibes".
-   Documented the "vibe lattice concept" explicitly in `vibe_lattice_concept.md`.
-   Created `rust-vendor/rust-vendor-lib` and `rust-vendor/rust-crate-searcher` for Rust crate vendorization and searching.
-   Documented current blockers and required user actions for resolving the parent project's workspace configuration in `issue_for_parent_project_access.md`, `tasks_and_directories_for_parent_project.md`, and `current_resumption_task.md`.
-   Created `new_task.md` for the Emacs integration challenge.
-   Removed `current_task.md` as its content is now superseded by `current_resumption_task.md`.